{"/home/travis/build/npmtest/node-npmtest-command-line-args/test.js":"/* istanbul instrument in package npmtest_command_line_args */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-command-line-args/lib.npmtest_command_line_args.js":"/* istanbul instrument in package npmtest_command_line_args */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_command_line_args = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_command_line_args = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-command-line-args/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-command-line-args && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_command_line_args */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_command_line_args\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_command_line_args.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_command_line_args.rollup.js'] =\n            local.assetsDict['/assets.npmtest_command_line_args.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_command_line_args.__dirname +\n                    '/lib.npmtest_command_line_args.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-command-line-args/node_modules/command-line-args/lib/command-line-args.js":"'use strict'\n\n/**\n * @module command-line-args\n */\nmodule.exports = commandLineArgs\n\n/**\n * Returns an object containing all options set on the command line. By default it parses the global  [`process.argv`](https://nodejs.org/api/process.html#process_process_argv) array.\n *\n * By default, an exception is thrown if the user sets an unknown option (one without a valid [definition](#exp_module_definition--OptionDefinition)). To enable __partial parsing__, invoke `commandLineArgs` with the `partial` option - all unknown arguments will be returned in the `_unknown` property.\n *\n *\n * @param {module:definition[]} - An array of [OptionDefinition](#exp_module_definition--OptionDefinition) objects\n * @param [options] {object} - Options.\n * @param [options.argv] {string[]} - An array of strings, which if passed will be parsed instead  of `process.argv`.\n * @param [options.partial] {boolean} - If `true`, an array of unknown arguments is returned in the `_unknown` property of the output.\n * @returns {object}\n * @throws `UNKNOWN_OPTION` if `options.partial` is false and the user set an undefined option\n * @throws `NAME_MISSING` if an option definition is missing the required `name` property\n * @throws `INVALID_TYPE` if an option definition has a `type` value that's not a function\n * @throws `INVALID_ALIAS` if an alias is numeric, a hyphen or a length other than 1\n * @throws `DUPLICATE_NAME` if an option definition name was used more than once\n * @throws `DUPLICATE_ALIAS` if an option definition alias was used more than once\n * @throws `DUPLICATE_DEFAULT_OPTION` if more than one option definition has `defaultOption: true`\n * @alias module:command-line-args\n */\nfunction commandLineArgs (optionDefinitions, options) {\n  options = options || {}\n  const Definitions = require('./definitions')\n  const option = require('./option')\n  const Argv = require('./argv')\n  const Output = require('./output')\n  const GroupedOutput = require('./grouped-output')\n\n  const definitions = new Definitions()\n  definitions.load(optionDefinitions)\n  const argv = new Argv()\n  argv.load(options.argv)\n  argv.expandOptionEqualsNotation()\n  argv.expandGetoptNotation()\n  argv.validate(definitions, options)\n\n  const output = definitions.isGrouped() ? new GroupedOutput(definitions, options) : new Output(definitions, options)\n  let optionName\n\n  argv.forEach(arg => {\n    if (option.isOption(arg)) {\n      optionName = output.set(arg) ? undefined : arg\n    } else {\n      optionName = output.set(optionName, arg) ? undefined : optionName\n    }\n  })\n\n  return output.toObject()\n}\n","/home/travis/build/npmtest/node-npmtest-command-line-args/node_modules/command-line-args/lib/argv.js":"'use strict'\nconst arrayify = require('array-back')\nconst option = require('./option')\n\n/**\n * Handles parsing different argv notations\n *\n * @module argv\n * @private\n */\n\nclass Argv extends Array {\n  load (argv) {\n    if (argv) {\n      argv = arrayify(argv)\n    } else {\n      /* if no argv supplied, assume we are parsing process.argv */\n      argv = process.argv.slice(0)\n      argv.splice(0, 2)\n    }\n    argv.forEach(arg => this.push(arg))\n  }\n\n  clear () {\n    this.length = 0\n  }\n\n  /**\n   * expand --option=value style args. The value is clearly marked to indicate it is definitely a value (which would otherwise be unclear if the value is `--value`, which would be parsed as an option). The special marker is removed in parsing phase.\n   */\n  expandOptionEqualsNotation () {\n    const optEquals = option.optEquals\n    if (this.some(optEquals.test.bind(optEquals))) {\n      const expandedArgs = []\n      this.forEach(arg => {\n        const matches = arg.match(optEquals.re)\n        if (matches) {\n          expandedArgs.push(matches[1], option.VALUE_MARKER + matches[2])\n        } else {\n          expandedArgs.push(arg)\n        }\n      })\n      this.clear()\n      this.load(expandedArgs)\n    }\n  }\n\n  /**\n   * expand getopt-style combined options\n   */\n  expandGetoptNotation () {\n    const findReplace = require('find-replace')\n    const combinedArg = option.combined\n    const hasGetopt = this.some(combinedArg.test.bind(combinedArg))\n    if (hasGetopt) {\n      findReplace(this, combinedArg.re, arg => {\n        arg = arg.slice(1)\n        return arg.split('').map(letter => '-' + letter)\n      })\n    }\n  }\n\n  /**\n   * Inspect the user-supplied options for validation issues.\n   * @throws `UNKNOWN_OPTION`\n   */\n  validate (definitions, options) {\n    options = options || {}\n    let invalidOption\n\n    if (!options.partial) {\n      const optionWithoutDefinition = this\n        .filter(arg => option.isOption(arg))\n        .some(arg => {\n          if (definitions.get(arg) === undefined) {\n            invalidOption = arg\n            return true\n          }\n        })\n      if (optionWithoutDefinition) {\n        halt(\n          'UNKNOWN_OPTION',\n          'Unknown option: ' + invalidOption\n        )\n      }\n    }\n  }\n}\n\nfunction halt (name, message) {\n  const err = new Error(message)\n  err.name = name\n  throw err\n}\n\nmodule.exports = Argv\n","/home/travis/build/npmtest/node-npmtest-command-line-args/node_modules/command-line-args/lib/option.js":"'use strict'\n\n/**\n * A module for testing for and extracting names from options (e.g. `--one`, `-o`)\n *\n * @module option\n * @private\n */\n\nclass Arg {\n  constructor (re) {\n    this.re = re\n  }\n\n  name (arg) {\n    return arg.match(this.re)[1]\n  }\n  test (arg) {\n    return this.re.test(arg)\n  }\n}\n\nconst option = {\n  short: new Arg(/^-([^\\d-])$/),\n  long: new Arg(/^--(\\S+)/),\n  combined: new Arg(/^-([^\\d-]{2,})$/),\n  isOption (arg) { return this.short.test(arg) || this.long.test(arg) },\n  optEquals: new Arg(/^(--\\S+?)=(.*)/),\n  VALUE_MARKER: '552f3a31-14cd-4ced-bd67-656a659e9efb' // must be unique\n}\n\nmodule.exports = option\n","/home/travis/build/npmtest/node-npmtest-command-line-args/node_modules/command-line-args/lib/definition.js":"'use strict'\nconst t = require('typical')\n\n/**\n * @module definition\n */\n\n/**\n * Describes a command-line option. Additionally, you can add `description` and `typeLabel` properties and make use of [command-line-usage](https://github.com/75lb/command-line-usage).\n * @alias module:definition\n * @typicalname option\n */\nclass OptionDefinition {\n  constructor (definition) {\n    /**\n    * The only required definition property is `name`, so the simplest working example is\n    * ```js\n    * [\n    *   { name: \"file\" },\n    *   { name: \"verbose\" },\n    *   { name: \"depth\"}\n    * ]\n    * ```\n    *\n    * In this case, the value of each option will be either a Boolean or string.\n    *\n    * | #   | Command line args | .parse() output |\n    * | --- | -------------------- | ------------ |\n    * | 1   | `--file` | `{ file: true }` |\n    * | 2   | `--file lib.js --verbose` | `{ file: \"lib.js\", verbose: true }` |\n    * | 3   | `--verbose very` | `{ verbose: \"very\" }` |\n    * | 4   | `--depth 2` | `{ depth: \"2\" }` |\n    *\n    * Unicode option names and aliases are valid, for example:\n    * ```js\n    * [\n    *   { name: 'один' },\n    *   { name: '两' },\n    *   { name: 'три', alias: 'т' }\n    * ]\n    * ```\n    * @type {string}\n    */\n    this.name = definition.name\n\n    /**\n    * The `type` value is a setter function (you receive the output from this), enabling you to be specific about the type and value received.\n    *\n    * You can use a class, if you like:\n    *\n    * ```js\n    * const fs = require('fs')\n    *\n    * function FileDetails(filename){\n    *   if (!(this instanceof FileDetails)) return new FileDetails(filename)\n    *   this.filename = filename\n    *   this.exists = fs.existsSync(filename)\n    * }\n    *\n    * const cli = commandLineArgs([\n    *   { name: 'file', type: FileDetails },\n    *   { name: 'depth', type: Number }\n    * ])\n    * ```\n    *\n    * | #   | Command line args| .parse() output |\n    * | --- | ----------------- | ------------ |\n    * | 1   | `--file asdf.txt` | `{ file: { filename: 'asdf.txt', exists: false } }` |\n    *\n    * The `--depth` option expects a `Number`. If no value was set, you will receive `null`.\n    *\n    * | #   | Command line args | .parse() output |\n    * | --- | ----------------- | ------------ |\n    * | 2   | `--depth` | `{ depth: null }` |\n    * | 3   | `--depth 2` | `{ depth: 2 }` |\n    *\n    * @type {function}\n    * @default String\n    */\n    this.type = definition.type || String\n\n    /**\n    * getopt-style short option names. Can be any single character (unicode included) except a digit or hypen.\n    *\n    * ```js\n    * [\n    *   { name: \"hot\", alias: \"h\", type: Boolean },\n    *   { name: \"discount\", alias: \"d\", type: Boolean },\n    *   { name: \"courses\", alias: \"c\" , type: Number }\n    * ]\n    * ```\n    *\n    * | #   | Command line | .parse() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `-hcd` | `{ hot: true, courses: null, discount: true }` |\n    * | 2   | `-hdc 3` | `{ hot: true, discount: true, courses: 3 }` |\n    *\n    * @type {string}\n    */\n    this.alias = definition.alias\n\n    /**\n    * Set this flag if the option takes a list of values. You will receive an array of values, each passed through the `type` function (if specified).\n    *\n    * ```js\n    * [\n    *   { name: \"files\", type: String, multiple: true }\n    * ]\n    * ```\n    *\n    * | #   | Command line | .parse() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 2   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 3   | `--files *` | `{ files: [ 'one.js', 'two.js' ] }` |\n    *\n    * @type {boolean}\n    */\n    this.multiple = definition.multiple\n\n    /**\n    * Any unclaimed command-line args will be set on this option. This flag is typically set on the most commonly-used option to make for more concise usage (i.e. `$ myapp *.js` instead of `$ myapp --files *.js`).\n    *\n    * ```js\n    * [\n    *   { name: \"files\", type: String, multiple: true, defaultOption: true }\n    * ]\n    * ```\n    *\n    * | #   | Command line | .parse() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 2   | `one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 3   | `*` | `{ files: [ 'one.js', 'two.js' ] }` |\n    *\n    * @type {boolean}\n    */\n    this.defaultOption = definition.defaultOption\n\n    /**\n    * An initial value for the option.\n    *\n    * ```js\n    * [\n    *   { name: \"files\", type: String, multiple: true, defaultValue: [ \"one.js\" ] },\n    *   { name: \"max\", type: Number, defaultValue: 3 }\n    * ]\n    * ```\n    *\n    * | #   | Command line | .parse() output |\n    * | --- | ------------ | ------------ |\n    * | 1   |  | `{ files: [ 'one.js' ], max: 3 }` |\n    * | 2   | `--files two.js` | `{ files: [ 'two.js' ], max: 3 }` |\n    * | 3   | `--max 4` | `{ files: [ 'one.js' ], max: 4 }` |\n    *\n    * @type {*}\n    */\n    this.defaultValue = definition.defaultValue\n\n    /**\n    * When your app has a large amount of options it makes sense to organise them in groups.\n    *\n    * There are two automatic groups: `_all` (contains all options) and `_none` (contains options without a `group` specified in their definition).\n    *\n    * ```js\n    * [\n    *   { name: \"verbose\", group: \"standard\" },\n    *   { name: \"help\", group: [ \"standard\", \"main\" ] },\n    *   { name: \"compress\", group: [ \"server\", \"main\" ] },\n    *   { name: \"static\", group: \"server\" },\n    *   { name: \"debug\" }\n    * ]\n    * ```\n    *\n    *<table>\n    *  <tr>\n    *    <th>#</th><th>Command Line</th><th>.parse() output</th>\n    *  </tr>\n    *  <tr>\n    *    <td>1</td><td><code>--verbose</code></td><td><pre><code>\n    *{\n    *  _all: { verbose: true },\n    *  standard: { verbose: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>2</td><td><code>--debug</code></td><td><pre><code>\n    *{\n    *  _all: { debug: true },\n    *  _none: { debug: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>3</td><td><code>--verbose --debug --compress</code></td><td><pre><code>\n    *{\n    *  _all: {\n    *    verbose: true,\n    *    debug: true,\n    *    compress: true\n    *  },\n    *  standard: { verbose: true },\n    *  server: { compress: true },\n    *  main: { compress: true },\n    *  _none: { debug: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>4</td><td><code>--compress</code></td><td><pre><code>\n    *{\n    *  _all: { compress: true },\n    *  server: { compress: true },\n    *  main: { compress: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *</table>\n    *\n    * @type {string|string[]}\n    */\n    this.group = definition.group\n\n    /* pick up any remaining properties */\n    for (let prop in definition) {\n      if (!this[prop]) this[prop] = definition[prop]\n    }\n  }\n\n  isBoolean (value) {\n    if (this.type) {\n      return this.type === Boolean || (t.isFunction(this.type) && this.type.name === 'Boolean')\n    } else {\n      return false\n    }\n  }\n}\n\nmodule.exports = OptionDefinition\n","/home/travis/build/npmtest/node-npmtest-command-line-args/node_modules/command-line-args/lib/definitions.js":"'use strict'\nconst arrayify = require('array-back')\nconst option = require('./option')\nconst Definition = require('./definition')\nconst t = require('typical')\n\n/**\n * @module definitions\n * @private\n */\n\n/**\n * @alias module:definitions\n */\nclass Definitions extends Array {\n  load (definitions) {\n    arrayify(definitions).forEach(def => this.push(new Definition(def)))\n    this.validate()\n  }\n\n  /**\n   * validate option definitions\n   * @returns {string}\n   */\n  validate (argv) {\n    const someHaveNoName = this.some(def => !def.name)\n    if (someHaveNoName) {\n      halt(\n        'NAME_MISSING',\n        'Invalid option definitions: the `name` property is required on each definition'\n      )\n    }\n\n    const someDontHaveFunctionType = this.some(def => def.type && typeof def.type !== 'function')\n    if (someDontHaveFunctionType) {\n      halt(\n        'INVALID_TYPE',\n        'Invalid option definitions: the `type` property must be a setter fuction (default: `Boolean`)'\n      )\n    }\n\n    let invalidOption\n\n    const numericAlias = this.some(def => {\n      invalidOption = def\n      return t.isDefined(def.alias) && t.isNumber(def.alias)\n    })\n    if (numericAlias) {\n      halt(\n        'INVALID_ALIAS',\n        'Invalid option definition: to avoid ambiguity an alias cannot be numeric [--' + invalidOption.name + ' alias is -' + invalidOption.alias + ']'\n      )\n    }\n\n    const multiCharacterAlias = this.some(def => {\n      invalidOption = def\n      return t.isDefined(def.alias) && def.alias.length !== 1\n    })\n    if (multiCharacterAlias) {\n      halt(\n        'INVALID_ALIAS',\n        'Invalid option definition: an alias must be a single character'\n      )\n    }\n\n    const hypenAlias = this.some(def => {\n      invalidOption = def\n      return def.alias === '-'\n    })\n    if (hypenAlias) {\n      halt(\n        'INVALID_ALIAS',\n        'Invalid option definition: an alias cannot be \"-\"'\n      )\n    }\n\n    const duplicateName = hasDuplicates(this.map(def => def.name))\n    if (duplicateName) {\n      halt(\n        'DUPLICATE_NAME',\n        'Two or more option definitions have the same name'\n      )\n    }\n\n    const duplicateAlias = hasDuplicates(this.map(def => def.alias))\n    if (duplicateAlias) {\n      halt(\n        'DUPLICATE_ALIAS',\n        'Two or more option definitions have the same alias'\n      )\n    }\n\n    const duplicateDefaultOption = hasDuplicates(this.map(def => def.defaultOption))\n    if (duplicateDefaultOption) {\n      halt(\n        'DUPLICATE_DEFAULT_OPTION',\n        'Only one option definition can be the defaultOption'\n      )\n    }\n  }\n\n  /**\n   * @param {string}\n   * @returns {Definition}\n   */\n  get (arg) {\n    return option.short.test(arg)\n      ? this.find(def => def.alias === option.short.name(arg))\n      : this.find(def => def.name === option.long.name(arg))\n  }\n\n  getDefault () {\n    return this.find(def => def.defaultOption === true)\n  }\n\n  isGrouped () {\n    return this.some(def => def.group)\n  }\n\n  whereGrouped () {\n    return this.filter(containsValidGroup)\n  }\n  whereNotGrouped () {\n    return this.filter(def => !containsValidGroup(def))\n  }\n\n}\n\nfunction halt (name, message) {\n  const err = new Error(message)\n  err.name = name\n  throw err\n}\n\nfunction containsValidGroup (def) {\n  return arrayify(def.group).some(group => group)\n}\n\nfunction hasDuplicates (array) {\n  const items = {}\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i]\n    if (items[value]) {\n      return true\n    } else {\n      if (t.isDefined(value)) items[value] = true\n    }\n  }\n}\n\nmodule.exports = Definitions\n","/home/travis/build/npmtest/node-npmtest-command-line-args/node_modules/command-line-args/lib/grouped-output.js":"'use strict'\nconst t = require('typical')\nconst arrayify = require('array-back')\nconst Output = require('./output')\n\nclass GroupedOutput extends Output {\n  toObject () {\n    const grouped = {\n      _all: this.output\n    }\n    if (this.unknown.length) grouped._unknown = this.unknown\n\n    this.definitions.whereGrouped().forEach(def => {\n      arrayify(def.group).forEach(groupName => {\n        grouped[groupName] = grouped[groupName] || {}\n        if (t.isDefined(this.output[def.name])) {\n          grouped[groupName][def.name] = this.output[def.name]\n        }\n      })\n    })\n\n    this.definitions.whereNotGrouped().forEach(def => {\n      if (t.isDefined(this.output[def.name])) {\n        if (!grouped._none) grouped._none = {}\n        grouped._none[def.name] = this.output[def.name]\n      }\n    })\n    return grouped\n  }\n}\n\nmodule.exports = GroupedOutput\n","/home/travis/build/npmtest/node-npmtest-command-line-args/node_modules/command-line-args/lib/output.js":"'use strict'\nconst t = require('typical')\nconst arrayify = require('array-back')\n\nclass Output {\n  constructor (defs, options) {\n    this.options = options || {}\n    this.output = {}\n    this.hasDefaultArrayValue = {}\n    this.unknown = []\n    const Definitions = require('./definitions')\n    this.definitions = new Definitions()\n    this.definitions.load(defs)\n    this._assignDefaultValues()\n  }\n\n  _assignDefaultValues () {\n    this.definitions.forEach(def => {\n      if (t.isDefined(def.defaultValue)) {\n        this.output[def.name] = def.multiple ? arrayify(def.defaultValue) : def.defaultValue\n        if (def.multiple) {\n          this.hasDefaultArrayValue[def.name] = true\n        }\n      }\n    })\n  }\n\n  /**\n   * Return `true` when an option value was set and is not a multiple. Return `false` if option was a multiple or if a value was not yet set.\n   */\n  set (optionArg, value) {\n    /* if the value marker is present at the beginning, strip it */\n    const option = require('./option')\n    const reBeginsWithValueMarker = new RegExp('^' + option.VALUE_MARKER)\n    const isOptionValueNotationValue = reBeginsWithValueMarker.test(value)\n    value = isOptionValueNotationValue\n      ? value.replace(reBeginsWithValueMarker, '')\n      : value\n\n    /* lookup the definition.. if no optionArg (--option) was supplied, use the defaultOption */\n    let def\n    if (t.isDefined(optionArg)) {\n      def = this.definitions.get(optionArg)\n    } else {\n      def = this.definitions.getDefault()\n      if (def) {\n        /* if it's not a `multiple` and the defaultOption has already been set, move on */\n        if (!def.multiple && t.isDefined(this.output[def.name])) {\n          if (t.isDefined(value)) this.unknown.push(value)\n          return true\n        /* in the case we're setting an --option=value value on a multiple defaultOption, tag the value onto the previous unknown */\n        } else if (def.multiple && isOptionValueNotationValue && t.isDefined(this.output[def.name])) {\n          if (t.isDefined(value) && this.unknown.length) {\n            this.unknown[this.unknown.length - 1] += `=${value}`\n            return true\n          }\n        }\n      }\n    }\n\n    /* if there's no definition or defaultOption, do nothing and continue */\n    if (!def) {\n      if (t.isDefined(optionArg)) this.unknown.push(optionArg)\n      if (t.isDefined(value)) {\n        if (isOptionValueNotationValue) {\n          this.unknown[this.unknown.length - 1] += `=${value}`\n        } else {\n          this.unknown.push(value)\n        }\n      }\n      return true\n    }\n\n    const name = def.name\n\n    /* if not already initialised, set a `multiple` value to a new array.  */\n    if (def.multiple && !t.isDefined(this.output[name])) this.output[name] = []\n\n    /* for boolean types, set value to `true`. For all other types run value through setter function. */\n    if (def.isBoolean()) {\n      value = true\n    } else if (t.isDefined(value)) {\n      value = def.type ? def.type(value) : value\n    }\n\n    if (t.isDefined(value)) {\n      if (Array.isArray(this.output[name])) {\n        if (this.hasDefaultArrayValue[name]) {\n          this.output[name] = [ value ]\n          delete this.hasDefaultArrayValue[name]\n        } else {\n          this.output[name].push(value)\n        }\n        return false\n      } else {\n        this.output[name] = value\n        return true\n      }\n    } else {\n      if (!Array.isArray(this.output[name])) this.output[name] = null\n      return false\n    }\n  }\n\n  get (name) {\n    return this.output[name]\n  }\n\n  toObject () {\n    let output\n    if (this.options.partial && this.unknown.length) {\n      output = Object.assign({}, this.output)\n      output._unknown = this.unknown\n    } else {\n      output = this.output\n    }\n    return output\n  }\n}\n\nmodule.exports = Output\n"}